#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: eSirPlayground
# Youtube Channel: https://goo.gl/fvkdwm 
#=================================================

name: Build_NanoPi_R2S_No_Docker

#on: 
  repository_dispatch:
  workflow_dispatch:
  
#  schedule:
    - cron: 20 9 * * 6
  
#  push:
    branches: 
      - NoDocker

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex node-uglify git gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede.git
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
        
    - name: Delete Old Argon
      working-directory: ./openwrt/package
      run: |
        rm -rf lean/luci-theme-argon    
        
    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install -a
           
    - name: Import external feeds
      working-directory: ./openwrt
      run: |
        git clone https://github.com/xiaorouji/openwrt-passwall.git package/lienol
        git clone -b 18.06 https://github.com/super27035/luci-theme-argon.git package/luci-theme-argon
        git clone https://github.com/super27035/lua-maxminddb.git package/lua-maxminddb  
        git clone https://github.com/jerrykuku/luci-app-argon-config.git package/luci-app-argon-config
        git clone https://github.com/jerrykuku/luci-app-vssr.git package/luci-app-vssr
        git clone https://github.com/vernesong/OpenClash.git package/OpenClash
        git clone https://github.com/lisaac/luci-app-dockerman.git package/luci-app-dockerman
        git clone https://github.com/lisaac/luci-lib-docker.git package/luci-lib-docker
        
    - name: Copy FILES
      run: |
        cd openwrt
        cp -rf ../PATCH/R2S/files ./files
                
    - name: Configuration Customization - Build_NanoPi_R2S_v3.0
      env:
        CONFIG_FILE: 'NanoPi_R2S_v3.0.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt && make defconfig

        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) V=s
        
    #- name : Upload artifact 1
    #  uses: actions/upload-artifact@master
    #  with:
    #    name: OpenWrt
    #    path: openwrt/bin 
        
    - name: Assemble Artifact
      id: assemble_artifact
      run: |
        rm -rf ./artifact/
        mkdir -p ./artifact/
        cp openwrt/bin/targets/rockchip/armv8/*squashfs-sysupgrade.img.gz ./artifact/
        cd openwrt
        cd ..
        zip -r artifact.zip ./artifact/
        release_tag="R2S-NoDocker-$(date +%Y-%m-%d)"
        echo "##[set-output name=release_tag;]$release_tag"
    - name: Upload Artifact
      uses: actions/upload-artifact@main
      with:
        name: ${{ steps.assemble_artifact.outputs.release_tag }}-ROM
        path: ./artifact.zip
    - name: Create Release
      id: create_release
      uses: actions/create-release@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
        release_name: SUPER ${{ steps.assemble_artifact.outputs.release_tag }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./artifact.zip
        asset_name: ${{ steps.assemble_artifact.outputs.release_tag }}-ROM.zip
        asset_content_type: application/zip
      
